// Code generated by Kitex v0.11.3. DO NOT EDIT.

package apiservice

import (
	"context"

	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"

	api "github.com/anthony-dong/golang/pkg/rpc/kitex_demo/kitex_gen/api"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	TestStruct(ctx context.Context, req *api.Request, callOptions ...callopt.Option) (r *api.Response, err error)
	TestVoid(ctx context.Context, req *api.Request, callOptions ...callopt.Option) (err error)
	TestOnewayVoid(ctx context.Context, req *api.Request, callOptions ...callopt.Option) (err error)
	TestList(ctx context.Context, req *api.Request, callOptions ...callopt.Option) (r []*api.Response, err error)
	TestSet(ctx context.Context, req *api.Request, callOptions ...callopt.Option) (r []*api.Response, err error)
	TestMap(ctx context.Context, req *api.Request, callOptions ...callopt.Option) (r map[string]*api.Response, err error)
	TestIntMap(ctx context.Context, req *api.Request, callOptions ...callopt.Option) (r map[int64]*api.Response, err error)
	TestString(ctx context.Context, req *api.Request, callOptions ...callopt.Option) (r string, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kAPIServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kAPIServiceClient struct {
	*kClient
}

func (p *kAPIServiceClient) TestStruct(ctx context.Context, req *api.Request, callOptions ...callopt.Option) (r *api.Response, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.TestStruct(ctx, req)
}

func (p *kAPIServiceClient) TestVoid(ctx context.Context, req *api.Request, callOptions ...callopt.Option) (err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.TestVoid(ctx, req)
}

func (p *kAPIServiceClient) TestOnewayVoid(ctx context.Context, req *api.Request, callOptions ...callopt.Option) (err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.TestOnewayVoid(ctx, req)
}

func (p *kAPIServiceClient) TestList(ctx context.Context, req *api.Request, callOptions ...callopt.Option) (r []*api.Response, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.TestList(ctx, req)
}

func (p *kAPIServiceClient) TestSet(ctx context.Context, req *api.Request, callOptions ...callopt.Option) (r []*api.Response, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.TestSet(ctx, req)
}

func (p *kAPIServiceClient) TestMap(ctx context.Context, req *api.Request, callOptions ...callopt.Option) (r map[string]*api.Response, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.TestMap(ctx, req)
}

func (p *kAPIServiceClient) TestIntMap(ctx context.Context, req *api.Request, callOptions ...callopt.Option) (r map[int64]*api.Response, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.TestIntMap(ctx, req)
}

func (p *kAPIServiceClient) TestString(ctx context.Context, req *api.Request, callOptions ...callopt.Option) (r string, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.TestString(ctx, req)
}
